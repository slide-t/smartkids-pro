<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>SmartKids Pro | Keyboard Tutor</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .fade-in { animation: fadeIn 0.5s ease-in-out; }
    @keyframes fadeIn { from { opacity: 0; transform: translateY(10px);} to { opacity: 1; transform: translateY(0);} }
  </style>
</head>
<body class="bg-slate-900 text-white min-h-screen flex flex-col items-center p-6">

  <h1 class="text-3xl font-bold mb-4 text-blue-400">SmartKids Pro Keyboard Tutor</h1>

  <!-- Class Selector -->
  <div class="mb-6">
    <label for="classSelect" class="text-lg font-semibold mr-2">Select Class:</label>
    <select id="classSelect" class="bg-slate-800 px-3 py-2 rounded text-white focus:ring-2 focus:ring-blue-400">
      <option value="">Choose Class</option>
    </select>
  </div>

  <!-- Lesson Display -->
  <div id="lessonBox" class="hidden flex flex-col items-center w-full max-w-lg bg-slate-800 p-6 rounded-xl shadow-lg fade-in">
    <h2 id="lessonTitle" class="text-xl font-semibold mb-2"></h2>
    <div id="rootWord" class="text-3xl font-bold text-blue-300 tracking-wider mb-4"></div>

    <input id="typedWord" type="text" placeholder="Type a word..." class="w-full px-4 py-2 rounded text-black focus:ring-2 focus:ring-blue-400 outline-none mb-4" />

    <button id="submitWord" class="bg-blue-600 hover:bg-blue-500 px-4 py-2 rounded mb-4">Submit Word</button>

    <div class="flex justify-between w-full mb-4 text-sm">
      <div>‚úÖ Correct Words: <span id="score">0</span></div>
      <div>üéØ Target: <span id="target">10</span></div>
    </div>

    <div id="message" class="h-6 text-center text-yellow-300 mb-2"></div>

    <ul id="correctList" class="list-disc pl-6 text-left w-full text-green-400 max-h-48 overflow-y-auto"></ul>

    <button id="nextLesson" class="hidden mt-6 bg-green-600 hover:bg-green-500 px-4 py-2 rounded">Next Lesson</button>
  </div>

  <script>
    // -------------------------------
    // SmartKids Pro Typing Tutor Script
    // -------------------------------
    const classSelect = document.getElementById('classSelect');
    const lessonBox = document.getElementById('lessonBox');
    const lessonTitle = document.getElementById('lessonTitle');
    const rootWordDisplay = document.getElementById('rootWord');
    const typedWord = document.getElementById('typedWord');
    const submitWord = document.getElementById('submitWord');
    const correctList = document.getElementById('correctList');
    const message = document.getElementById('message');
    const scoreEl = document.getElementById('score');
    const targetEl = document.getElementById('target');
    const nextLesson = document.getElementById('nextLesson');

    let lessonsData = {};
    let currentLesson = null;
    let correctWords = [];
    let target = 10;

    // Load lessons
    async function loadLessons() {
      try {
        const response = await fetch('/json-files/keyboard_lessons.json');
        lessonsData = await response.json();
      } catch (e) {
        console.warn("‚ö†Ô∏è Using fallback data");
        lessonsData = {
          "Year 1": [
            { "title": "Lesson 1", "rootWord": "communication", "minLength": 3 },
            { "title": "Lesson 2", "rootWord": "generation", "minLength": 3 },
            { "title": "Lesson 3", "rootWord": "education", "minLength": 3 }
          ],
          "Year 2": [
            { "title": "Lesson 1", "rootWord": "professional", "minLength": 4 },
            { "title": "Lesson 2", "rootWord": "development", "minLength": 4 },
            { "title": "Lesson 3", "rootWord": "intelligent", "minLength": 4 }
          ],
          "Year 3": [
            { "title": "Lesson 1", "rootWord": "programming", "minLength": 4 },
            { "title": "Lesson 2", "rootWord": "responsibility", "minLength": 5 },
            { "title": "Lesson 3", "rootWord": "relationship", "minLength": 5 }
          ]
        };
      }
      populateClassDropdown();
    }

    // Populate Class Selector
    function populateClassDropdown() {
      for (const year in lessonsData) {
        const option = document.createElement('option');
        option.value = year;
        option.textContent = year;
        classSelect.appendChild(option);
      }
    }

    // Shuffle helper
    function randomLesson(arr) {
      return arr[Math.floor(Math.random() * arr.length)];
    }

    // Start a lesson
    function startLesson(selectedClass) {
      const lessons = lessonsData[selectedClass];
      currentLesson = randomLesson(lessons);
      lessonTitle.textContent = currentLesson.title + " - " + selectedClass;
      rootWordDisplay.textContent = currentLesson.rootWord.toUpperCase();
      correctWords = [];
      scoreEl.textContent = 0;
      targetEl.textContent = target;
      correctList.innerHTML = '';
      message.textContent = '';
      lessonBox.classList.remove('hidden');
      nextLesson.classList.add('hidden');
      typedWord.value = '';
      typedWord.focus();
    }

    // Check if word valid from rootWord
    function canFormWord(word, rootWord) {
      const rootLetters = rootWord.split('');
      for (let ch of word) {
        const index = rootLetters.indexOf(ch);
        if (index === -1) return false;
        rootLetters.splice(index, 1);
      }
      return true;
    }

    // Submit handler
    function checkWord() {
      const input = typedWord.value.toLowerCase().trim();
      const root = currentLesson.rootWord.toLowerCase();

      if (!input) return;
      if (input.length < currentLesson.minLength) {
        message.textContent = `‚ùó Word too short. Minimum ${currentLesson.minLength} letters.`;
        return;
      }
      if (correctWords.includes(input)) {
        message.textContent = "‚ö†Ô∏è Already used.";
        return;
      }
      if (!canFormWord(input, root)) {
        message.textContent = "‚ùå Can't be formed from given letters.";
        return;
      }

      correctWords.push(input);
      scoreEl.textContent = correctWords.length;
      const li = document.createElement('li');
      li.textContent = input;
      li.classList.add('fade-in');
      correctList.appendChild(li);
      message.textContent = "‚úÖ Correct!";
      typedWord.value = '';

      if (correctWords.length >= target) {
        message.textContent = "üéâ Excellent! Lesson Complete.";
        nextLesson.classList.remove('hidden');
      }
    }

    // Event listeners
    submitWord.addEventListener('click', checkWord);
    typedWord.addEventListener('keydown', e => { if (e.key === 'Enter') checkWord(); });
    classSelect.addEventListener('change', e => {
      if (e.target.value) startLesson(e.target.value);
    });
    nextLesson.addEventListener('click', () => startLesson(classSelect.value));

    // Initialize
    loadLessons();
  </script>
</body>
</html>
